1. 머신러닝의 개념
데이터를 기반으로 >패턴<을 학습하고 결과를 추론하는 알고리즘 기법을 통칭
데이터 마이닝, 영상 인식, 음성 인식, 자연어 처리 분야에서 머신러닝 적용

머신러닝은 왜 필요한가? 
현실 세계가 복잡해서 코드 작성에 예외처리가 늘어만 감.. 
MNIST (Modified National Institute of Standards and Technology database) 
-> 손으로 쓴 숫자들로 이루어진 대형 데이터베이스이며, 다양한 화상 처리 시스템을 트레이닝하기 위해 일반적으로 사용된다.

머신러닝은 문제와 답을 주고 규칙을 스스로 찾음 (기존의 컴퓨터 패러다임과 차이점.)

머신러닝은 복잡한 문제를 데이터 기반으로 숨겨진 패턴을 인지해 해결한다.


2. 머신러닝의 유형과 데이터의 중요성

지도학습 supervised learning
비지도학습 Un-supervised learning
강화학습 Reinforcement learning

지도학습 -> 분류, 회귀, 추천 시스템, 시각/음성감지/인지
(답이 있는 게 지도학습. 문제는 Feature, 답은 Target/Lable이라 함)
- 분류는 암이 양성인가 음성인가.. 단일 값을 예측하는 것
- 회귀는 연속값을 예측하는 것.. 분류와 회귀는 비슷함
- 추천 시스템은 사용자의 소비 패턴을 학습해서 추천하는 것

비지도학습 -> 군집화(클러스터링), 차원 축소, 토픽 모델링 & 문서 군집화
(답이 없는 건  비지도학습, feature가 여러가지인데 비슷한 특성을 가진 애들끼리 모음. 이게 군집화)
- 차원 축소는 Feature를 축소하는 것. 너무 많으면 학습 능력을 떨어뜨릴 수 있음. (함축 의미 찾기)

머신러닝의 단점
- 데이터에 너무 의존적임. Garbage in -> Garbage out (쓰레기 넣으면 쓰레기 나옴)
- 학습 시에 최적의 결과를 도출하기 위해 수립된 모델은 실제 환경 데이터 적용 시  >과적합< 되기 쉬움.
- 머신러닝은 블랙박스 (복잡한 알고리즘으로 인해 도출된 결과에 대한 논리적인 이해 어려움)


3. 파이썬 기반 머신러닝의 특징 및 장점과 구성 요소

R : 통계 전용 프로그램 언어. SPSS, SAS 등 
파이썬 : 많은 라이브러리를 가지고 있어서 확장성이 뛰어남. 기존 앱과 연계 쉬움, 호환성 좋음

대부분의 딥러닝 프레임워크가 파이썬 기반으로 작성됨.


<<머신러닝 주요 패키지>>
머신러닝 패키지 - scikit learn
배열/선형대수/통계 패키지 - Numpy, SciPy
데이터 핸들링 - pandas
시각화 - matplotlib, Seaborn
대화형 파이썬 툴 - 주피터 랩

2차원 기반의 데이터는 판다스를 통해서... 
Seaborn이 API가 좀 더  깔끔함..

4. 사이킷런 업그레이드 수행 및 XGBoost와 LightGBM 설치
- pip install scikit-learn==1.0.2 
1.0.2 버전으로 통일하여 사이킷런 설치
---------------
파이썬 버전이 3.8보다 낮거나 3.10보다 높으면 3.10으로 다시 설치하시고 싸이킷 설치하시면 됩니다. 싸이킷 1.0.2 버전은 파이썬 3.8에서 3.10만 지원한다고 하네요
python --version (버전 확인)
conda install python=3.10
pip install scikit-learn==1.0.2

다시 아까 new_base 가상환경 console에서(아님 conda activate new_base 수행 후)
pip install ipykernel
설치 후
python -m ipykernel 
install --user --name=new_base
를 수행 후에 Mac 메뉴에서 conda 서브 메뉴에 new_base용 jupyter notebook이 설치되는지 확인해 보시기 바랍니다.

> import sklearn
> print(sklearn.__version__)


------------
XGBoost 설치
 conda install -c anaconda py-xgboost
다시 주피터 노트북 들어가서 잘 설치 됐는지 확인.
import xgboost as xgb
from xgboost import XGBClassifier

> import xgboost
> print(xgboost.__version__)
















